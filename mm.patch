commit cd43060f0c83ed03dbe1e9217d1ca0cabf22679a
Author: Brian Camilo Coutinho <coutinho@dellxe2pc>
Date:   Fri Apr 29 22:13:56 2016 -0500

    mm patch: this tries to fix map populate

diff --git a/mm/memory.c b/mm/memory.c
index 6e91ac7..38e97b8 100644
--- a/mm/memory.c
+++ b/mm/memory.c
@@ -1471,6 +1471,35 @@ int zap_vma_ptes(struct vm_area_struct *vma, unsigned long address,
 EXPORT_SYMBOL_GPL(zap_vma_ptes);
 
 /**
+ * Adding this to fix PMFS map-populate :
+ * see -
+ * brian / CS736 project
+ */
+static int follow_pfn_pte(struct vm_area_struct *vma, unsigned long address,
+       pte_t *pte, unsigned int flags)
+{
+   /* No page to get reference */
+   if (flags & FOLL_GET)
+       return -EFAULT;
+
+   if (flags & FOLL_TOUCH) {
+       pte_t entry = *pte;
+
+       if (flags & FOLL_WRITE)
+           entry = pte_mkdirty(entry);
+       entry = pte_mkyoung(entry);
+
+       if (!pte_same(*pte, entry)) {
+           set_pte_at(vma->vm_mm, address, pte, entry);
+           update_mmu_cache(vma, address, pte);
+       }
+   }
+
+   /* Proper page table entry exists, but no corresponding struct page */
+   return -EEXIST;
+}
+
+/**
  * follow_page_mask - look up a page descriptor from a user-virtual address
  * @vma: vm_area_struct mapping @address
  * @address: virtual address to look up
@@ -1582,10 +1611,27 @@ split_fallthrough:
 
 	page = vm_normal_page(vma, address, pte);
 	if (unlikely(!page)) {
+#if 0
 		if ((flags & FOLL_DUMP) ||
 		    !is_zero_pfn(pte_pfn(pte)))
 			goto bad_page;
 		page = pte_page(pte);
+#endif
+       if (flags & FOLL_DUMP) {
+           /* Avoid special (like zero) pages in core dumps */
+           page = ERR_PTR(-EFAULT);
+           goto unlock;
+       }
+
+       if (is_zero_pfn(pte_pfn(pte))) {
+           page = pte_page(pte);
+       } else {
+           int ret;
+
+           ret = follow_pfn_pte(vma, address, ptep, flags);
+           page = ERR_PTR(ret);
+           goto unlock;
+       }
 	}
 
 	if (flags & FOLL_GET)
@@ -1628,9 +1674,9 @@ unlock:
 out:
 	return page;
 
-bad_page:
-	pte_unmap_unlock(ptep, ptl);
-	return ERR_PTR(-EFAULT);
+//bad_page:
+//	pte_unmap_unlock(ptep, ptl);
+//	return ERR_PTR(-EFAULT);
 
 no_page:
 	pte_unmap_unlock(ptep, ptl);
@@ -1947,7 +1993,13 @@ long __get_user_pages(struct task_struct *tsk, struct mm_struct *mm,
 
 				cond_resched();
 			}
-			if (IS_ERR(page))
+            if (PTR_ERR(page) == -EEXIST) {
+                   /*
+                    * Proper page table entry exists, but no corresponding
+                    * struct page.
+                    */
+                goto next_page;
+            } else if (IS_ERR(page))
 				return i ? i : PTR_ERR(page);
 			if (pages) {
 				pages[i] = page;
